{"version":3,"sources":["component/Alert.js","component/Navbar.js","component/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","className","type","role","Word","lower","toLowerCase","charAt","toUpperCase","slice","capitalizaion","msg","Navbar","mode","modeGreen","href","title","id","AboutText","onClick","toggleMode","htmlFor","toggleModeGreen","TextForm","useState","text","setText","heading","rows","value","onChange","event","target","style","backgroundColor","color","newText","showAlert","split","map","str","join","document","getElementById","select","navigator","clipboard","writeText","ExtraSpaces","length","defaultProps","App","setMode","alert","setAlert","setModeGreen","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4340df34.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalizaion = (Word) => {\r\n    const lower = Word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1).toLowerCase();\r\n  };\r\n\r\n  return (\r\n    props.Alert && (\r\n      <div className=\"container\">\r\n        <div\r\n          className={`alert alert-${props.Alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalizaion(props.Alert.type)}</strong> {props.Alert.msg}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-close\"\r\n            data-bs-dismiss=\"alert\"\r\n            aria-label=\"Close\"\r\n          ></button>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${\r\n          props.mode || props.modeGreen\r\n        } bg-${props.mode || props.modeGreen} `}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  {props.AboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.mode === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable {props.mode === \"light\" ? \"dark\" : \"light\"} Mode\r\n              </label>\r\n            </div>\r\n            {/* //Green Dark mode */}\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleModeGreen}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.modeGreen === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable {props.modeGreen === \"light\" ? \"Green\" : \"light\"} Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  AboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  AboutText: \"Set About here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpperCase = () => {\r\n    const newText = text === \"\" ? \"No Text Found \" : text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UPPERCASE\", \"success\");\r\n  };\r\n  const handleLowerCase = () => {\r\n    const newText = text === \"\" ? \"No Text Found \" : text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n  const handleCamelCase = () => {\r\n    const newText =\r\n      text === \"\"\r\n        ? \"No Text Found\"\r\n        : text\r\n            .split(\" \")\r\n            .map((str) => str[0].toUpperCase() + str.slice(1).toLowerCase())\r\n            .join(\" \");\r\n    setText(newText);\r\n    props.showAlert(\"COnverted to Camel Case\", \"success\");\r\n  };\r\n  const handleClear = () => {\r\n    const newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    const text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to ClipBoard\", \"success\");\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let ExtraSpaces = text.split(/[ ]+/);\r\n    setText(ExtraSpaces.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(event);\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"form-group mb-3\">\r\n        <h1>{props.heading}</h1>\r\n        {/* {console.log(text)} */}\r\n        {/* <label htmlFor=\"Rohit\">Email address</label> */}\r\n        <textarea\r\n          rows=\"8\"\r\n          className=\"form-control\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          id=\"myBox\"\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#00206a\" : \"light\",\r\n            color: props.mode === \"dark\" ? \"light\" : \"white\",\r\n          }}\r\n        ></textarea>\r\n        <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n          We'll never share your email with anyone else.\r\n        </small>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleUpperCase}>\r\n        Convert To Upper Case\r\n      </button>\r\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={handleClear}>\r\n        Clear Text\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary\" onClick={handleCamelCase}>\r\n        Convert To Camel Case\r\n      </button>\r\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={handleLowerCase}>\r\n        Convert To Lower Case\r\n      </button>\r\n      <br />\r\n      <button className=\"btn btn-primary\" onClick={handleCopy}>\r\n        Copy Text\r\n      </button>\r\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={handleExtraSpaces}>\r\n        Remove Extra Spaces\r\n      </button>\r\n      <br />\r\n      <div className=\"container my-3\">\r\n        <h1>Your Summary</h1>\r\n        <p>\r\n          You Typed {text.length - text.split(\" \").length + 1} Character And{\" \"}\r\n          {text === \"\" ? \"0\" : text.split(\" \").length} Words\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./component/About\";\nimport Alert from \"./component/Alert\";\nimport Navbar from \"./component/Navbar\";\nimport TextForm from \"./component/TextForm\";\nimport React from \"react\";\n\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const [modeGreen, setModeGreen] = useState(\"light\");\n  // const [buttonText, setButtonText] = useState(\"light\");\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      // setButtonText(\"light\");\n      showAlert(\"Dark Mode is Enabled\", \"success\");\n      document.body.style.backgroundColor = \"#05153a\";\n      document.body.style.color = \"White\";\n      document.title = \"TextUtiles - DarkMode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtiles - is Amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtiles Now\";\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      // setButtonText(\"dark\");\n      showAlert(\"light Mode is Enabled\", \"success\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      document.title = \"TextUtiles - LightMode\";\n    }\n  };\n\n  const toggleModeGreen = () => {\n    if (mode === \"light\") {\n      setModeGreen(\"dark\");\n      // setButtonText(\"light\");\n      showAlert(\"Green Mode is Enabled\", \"success\");\n      document.body.style.backgroundColor = \"#073607\";\n      document.body.style.color = \"White\";\n    } else {\n      setModeGreen(\"light\");\n      // setButtonText(\"dark\");\n      showAlert(\"light Mode is Enabled\", \"success\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n    }\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtiles\"\n          AboutText=\"Rohit\"\n          mode={mode}\n          modeGreen={modeGreen}\n          toggleMode={toggleMode}\n          toggleModeGreen={toggleModeGreen}\n          // buttonText={toggleMode}\n        />\n        <div className=\"container my-3 \">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\"> */}\n              <TextForm\n                heading=\"Enter the Text to Analyze\"\n                mode={mode}\n                modeGreen={modeGreen}\n                showAlert={showAlert}\n              />\n            {/* </Route>\n          </Switch> */}\n\n          <Alert Alert={alert} />\n\n          {/* <About /> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}